// L·∫•y d·ªØ li·ªáu t·ª´ localStorage ho·∫∑c s·ª≠ d·ª•ng m·∫∑c ƒë·ªãnh
let questions = JSON.parse(localStorage.getItem('halloweenQuestions')) || [];

let editingIndex = -1; // Index c·ªßa c√¢u h·ªèi ƒëang ch·ªânh s·ª≠a

// Kh·ªüi t·∫°o
function init() {
    updateQuestionCount();
    renderQuestionsList();
}

// V·∫Ω v√≤ng xoay
function drawWheel() {
    const numSegments = questions.length;
    const anglePerSegment = (2 * Math.PI) / numSegments;
    
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    
    for (let i = 0; i < numSegments; i++) {
        const startAngle = currentRotation + (i * anglePerSegment);
        const endAngle = startAngle + anglePerSegment;
        
        // V·∫Ω ph√¢n ƒëo·∫°n
        ctx.beginPath();
        ctx.moveTo(200, 200);
        ctx.arc(200, 200, 200, startAngle, endAngle);
        ctx.closePath();
        ctx.fillStyle = colors[i % colors.length];
        ctx.fill();
        ctx.strokeStyle = 'white';
        ctx.lineWidth = 3;
        ctx.stroke();
        
        // V·∫Ω s·ªë th·ª© t·ª±
        ctx.save();
        ctx.translate(200, 200);
        ctx.rotate(startAngle + anglePerSegment / 2);
        ctx.textAlign = 'center';
        ctx.fillStyle = 'white';
        ctx.font = 'bold 24px Arial';
        ctx.fillText(i + 1, 120, 10);
        ctx.restore();
    }
    
    // V·∫Ω t√¢m
    ctx.beginPath();
    ctx.arc(200, 200, 30, 0, 2 * Math.PI);
    ctx.fillStyle = 'white';
    ctx.fill();
    ctx.strokeStyle = '#333';
    ctx.lineWidth = 3;
    ctx.stroke();
}

// Quay v√≤ng xoay
function spinWheel() {
    if (isSpinning) return;
    if (questions.length === 0) {
        alert('Vui l√≤ng th√™m √≠t nh·∫•t m·ªôt c√¢u h·ªèi!');
        return;
    }
    
    isSpinning = true;
    document.getElementById('spinBtn').disabled = true;
    
    // T·ªëc ƒë·ªô quay ng·∫´u nhi√™n
    spinVelocity = Math.random() * 0.3 + 0.5;
    
    // ·∫®n c√¢u h·ªèi c≈©
    document.getElementById('answersGrid').innerHTML = '';
    document.getElementById('questionText').textContent = 'ƒêang quay...';
    
    animateWheel();
}

// Animation v√≤ng xoay
function animateWheel() {
    if (spinVelocity > 0.001) {
        currentRotation += spinVelocity;
        spinVelocity *= 0.2; // Gi·∫£m t·ªëc ƒë·ªô
        drawWheel();
        requestAnimationFrame(animateWheel);
    } else {
        // D·ª´ng quay
        isSpinning = false;
        document.getElementById('spinBtn').disabled = false;
        
        // T√≠nh to√°n c√¢u h·ªèi ƒë∆∞·ª£c ch·ªçn
        const normalizedRotation = currentRotation % (2 * Math.PI);
        const anglePerSegment = (2 * Math.PI) / questions.length;
        
        // M≈©i t√™n ch·ªâ xu·ªëng (g√≥c 0), ta c·∫ßn t√≠nh segment ·ªü v·ªã tr√≠ ƒë√≥
        let selectedIndex = Math.floor((2 * Math.PI - normalizedRotation) / anglePerSegment) % questions.length;
        
        selectedQuestion = questions[selectedIndex];
        displayQuestion();
    }
}

// Hi·ªÉn th·ªã c√¢u h·ªèi v√† ƒë√°p √°n
function displayQuestion() {
    if (!selectedQuestion) return;
    
    const questionDisplay = document.getElementById('questionDisplay');
    questionDisplay.classList.add('show');
    
    document.getElementById('questionText').textContent = selectedQuestion.question;
    
    const answersGrid = document.getElementById('answersGrid');
    answersGrid.innerHTML = '';
    
    selectedQuestion.answers.forEach((answer, index) => {
        const answerBox = document.createElement('div');
        answerBox.className = 'answer-box';
        answerBox.textContent = answer;
        answerBox.onclick = function() {
            // B·ªè ch·ªçn t·∫•t c·∫£
            document.querySelectorAll('.answer-box').forEach(box => {
                box.classList.remove('selected');
            });
            // Ch·ªçn ƒë√°p √°n n√†y
            this.classList.add('selected');
        };
        answersGrid.appendChild(answerBox);
    });
}

// Render danh s√°ch c√¢u h·ªèi
function renderQuestionsList() {
    const questionsList = document.getElementById('questionsList');
    
    if (questions.length === 0) {
        questionsList.innerHTML = '<div class="empty-state">üëª Ch∆∞a c√≥ c√¢u h·ªèi n√†o. H√£y th√™m c√¢u h·ªèi ƒë·∫ßu ti√™n!</div>';
        return;
    }
    
    questionsList.innerHTML = questions.map((q, index) => `
        <div class="question-item">
            <div class="question-item-header">
                <span class="question-number">üéÉ C√¢u ${index + 1}</span>
                <div class="question-item-buttons">
                    <button class="btn-edit" onclick="editQuestion(${index})">‚úèÔ∏è S·ª≠a</button>
                    <button class="btn-delete" onclick="deleteQuestion(${index})">üóëÔ∏è X√≥a</button>
                </div>
            </div>
            <div class="question-item-text">${q.question}</div>
            <div class="question-item-answers">
                ${q.answers.map((a, i) => `
                    <div class="question-item-answer ${i === q.correctAnswer ? 'correct-answer' : ''}">
                        ${i === q.correctAnswer ? '‚úì ' : ''}${i + 1}. ${a}
                    </div>
                `).join('')}
            </div>
        </div>
    `).join('');
}

// L∆∞u c√¢u h·ªèi (Th√™m ho·∫∑c S·ª≠a)
function saveQuestion() {
    const questionInput = document.getElementById('questionInput');
    const answer1 = document.getElementById('answer1');
    const answer2 = document.getElementById('answer2');
    const answer3 = document.getElementById('answer3');
    const answer4 = document.getElementById('answer4');
    
    // L·∫•y ƒë√°p √°n ƒë√∫ng
    const correctAnswerRadio = document.querySelector('input[name="correctAnswer"]:checked');
    
    // Ki·ªÉm tra input
    if (!questionInput.value.trim()) {
        alert('üëª Vui l√≤ng nh·∫≠p c√¢u h·ªèi ma qu√°i!');
        return;
    }
    
    if (!answer1.value.trim() || !answer2.value.trim() || 
        !answer3.value.trim() || !answer4.value.trim()) {
        alert('üéÉ Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß 4 ƒë√°p √°n kinh ho√†ng!');
        return;
    }
    
    if (!correctAnswerRadio) {
        alert('üíÄ Vui l√≤ng ch·ªçn ƒë√°p √°n ƒë√∫ng!');
        return;
    }
    
    const questionData = {
        question: questionInput.value.trim(),
        answers: [
            answer1.value.trim(),
            answer2.value.trim(),
            answer3.value.trim(),
            answer4.value.trim()
        ],
        correctAnswer: parseInt(correctAnswerRadio.value)
    };
    
    if (editingIndex >= 0) {
        // S·ª≠a c√¢u h·ªèi
        questions[editingIndex] = questionData;
        cancelEdit();
    } else {
        // Th√™m c√¢u h·ªèi m·ªõi
        questions.push(questionData);
    }
    
    // Reset form
    questionInput.value = '';
    answer1.value = '';
    answer2.value = '';
    answer3.value = '';
    answer4.value = '';
    document.querySelectorAll('input[name="correctAnswer"]').forEach(radio => radio.checked = false);
    
    // L∆∞u v√†o localStorage
    saveToLocalStorage();
    
    // C·∫≠p nh·∫≠t UI
    updateQuestionCount();
    renderQuestionsList();
}

// S·ª≠a c√¢u h·ªèi
function editQuestion(index) {
    editingIndex = index;
    const question = questions[index];
    
    // ƒêi·ªÅn d·ªØ li·ªáu v√†o form
    document.getElementById('questionInput').value = question.question;
    document.getElementById('answer1').value = question.answers[0];
    document.getElementById('answer2').value = question.answers[1];
    document.getElementById('answer3').value = question.answers[2];
    document.getElementById('answer4').value = question.answers[3];
    
    // Ch·ªçn ƒë√°p √°n ƒë√∫ng
    document.querySelectorAll('input[name="correctAnswer"]').forEach(radio => {
        radio.checked = (parseInt(radio.value) === question.correctAnswer);
    });
    
    // Thay ƒë·ªïi UI
    document.getElementById('formTitle').textContent = '‚úèÔ∏è Ch·ªânh S·ª≠a C√¢u H·ªèi';
    document.getElementById('btnText').textContent = 'C·∫≠p Nh·∫≠t';
    document.getElementById('cancelBtn').style.display = 'block';
    
    // Scroll to form
    document.querySelector('.add-question-section').scrollIntoView({ behavior: 'smooth' });
}

// H·ªßy ch·ªânh s·ª≠a
function cancelEdit() {
    editingIndex = -1;
    
    // Reset form
    document.getElementById('questionInput').value = '';
    document.getElementById('answer1').value = '';
    document.getElementById('answer2').value = '';
    document.getElementById('answer3').value = '';
    document.getElementById('answer4').value = '';
    document.querySelectorAll('input[name="correctAnswer"]').forEach(radio => radio.checked = false);
    
    // Thay ƒë·ªïi UI
    document.getElementById('formTitle').textContent = 'ü¶á Th√™m C√¢u H·ªèi M·ªõi';
    document.getElementById('btnText').textContent = 'Th√™m C√¢u H·ªèi';
    document.getElementById('cancelBtn').style.display = 'none';
}

// X√≥a c√¢u h·ªèi
function deleteQuestion(index) {
    questions.splice(index, 1);
    
    // L∆∞u v√†o localStorage
    saveToLocalStorage();
    
    // C·∫≠p nh·∫≠t UI
    updateQuestionCount();
    renderQuestionsList();
    
    // N·∫øu ƒëang s·ª≠a c√¢u h·ªèi n√†y th√¨ h·ªßy
    if (editingIndex === index) {
        cancelEdit();
    } else if (editingIndex > index) {
        editingIndex--;
    }
}

// L∆∞u v√†o localStorage
function saveToLocalStorage() {
    localStorage.setItem('halloweenQuestions', JSON.stringify(questions));
}

// B·∫Øt ƒë·∫ßu game
function startGame() {
    if (questions.length === 0) {
        alert('üëª Vui l√≤ng th√™m √≠t nh·∫•t m·ªôt c√¢u h·ªèi tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu!');
        return;
    }
    
    // L∆∞u v√†o localStorage tr∆∞·ªõc khi chuy·ªÉn trang
    saveToLocalStorage();
    
    // Chuy·ªÉn sang trang game
    window.location.href = 'game.html';
}

// C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng c√¢u h·ªèi
function updateQuestionCount() {
    document.getElementById('questionCount').textContent = questions.length;
}

// Kh·ªüi ƒë·ªông khi trang load
window.onload = init;
